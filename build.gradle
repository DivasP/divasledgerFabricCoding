plugins {
    id 'java'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

jacoco { //Please do not change this
	toolVersion = "0.8.4"
	reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport { //Please do not change this
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled false
		xml.destination file("./jacoco.xml")
	}
}

jar {
	archiveBaseName = 'geektrust' //Please do not change this final artifact name
	version =  null               //Please do not change this final artifact version
	manifest {
		attributes 'Main-Class' : 'com.example.demo.LedgerCo' //Change this to the main class of your program which will be executed
	}
	// To create a single jar with all dependencies.
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	} {
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.2.0")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.2.0")
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

test { ///Please do not change this
	useJUnitPlatform()
	testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_ERROR"
	}
	finalizedBy jacocoTestReport // report is always generated after tests run
	afterSuite { desc, result ->
		if (!desc.parent)
			println("${result.resultType} " +
					"(${result.testCount} tests, " +
					"${result.successfulTestCount} successes, " +
					"${result.failedTestCount} failures, " +
					"${result.skippedTestCount} skipped)")
	}
}

